module ABI
  extend AbiCoderRb

  before_encoding lambda { |format, value|
    p "--------------------------"
    p "- #{format}: #{value}"
    if format.start_with?("bytes")
      hex_to_bin(value)
    else
      value
    end
  }
end

class Hello
  include AbiCoderRb

  def initialize
    before_encoding lambda { |format, value|
      p "--------------------------"
      p "- #{format}: #{value}"
      if format.start_with?("bytes")
        hex_to_bin(value)
      else
        value
      end
    }
  end

  def world
    type = "(bytes32,(address,uint256,uint256,address,uint256,address,uint256,bytes))"
    value = [
      "2628abe10aaf809f0ea9a33fb15782582e8d8353ea15698d7067b057748581a4",
      [
        "00000000001523057a05d6293c1e5171ee33ee0a",
        195,
        421_614,
        "0000000000d2de3e2444926c4577b0a59f1dd8bc",
        44,
        "0000000000d2de3e2444926c4577b0a59f1dd8bc",
        473_508,
        "394d1bca0000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b538870000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b53887000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000090841287191622077700000000000000000000000000000000000000000000000"
      ]
    ]
    encode(type, value)
  end
end

RSpec.describe ABI do
  it "(bytes32,(address,uint256,uint256,address,uint256,address,uint256,bytes)) - tranform_before_encode" do
    type = "(bytes32,(address,uint256,uint256,address,uint256,address,uint256,bytes))"
    value = [
      "2628abe10aaf809f0ea9a33fb15782582e8d8353ea15698d7067b057748581a4",
      [
        "00000000001523057a05d6293c1e5171ee33ee0a",
        195,
        421_614,
        "0000000000d2de3e2444926c4577b0a59f1dd8bc",
        44,
        "0000000000d2de3e2444926c4577b0a59f1dd8bc",
        473_508,
        "394d1bca0000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b538870000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b53887000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000090841287191622077700000000000000000000000000000000000000000000000"
      ]
    ]
    data = ABI.hex "2628abe10aaf809f0ea9a33fb15782582e8d8353ea15698d7067b057748581a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000001523057a05d6293c1e5171ee33ee0a00000000000000000000000000000000000000000000000000000000000000c30000000000000000000000000000000000000000000000000000000000066eee0000000000000000000000000000000000d2de3e2444926c4577b0a59f1dd8bc000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000d2de3e2444926c4577b0a59f1dd8bc00000000000000000000000000000000000000000000000000000000000739a4000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000a4394d1bca0000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b538870000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b5388700000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000009084128719162207770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    expect(ABI.encode(type, value)).to eq data
  end

  it "(bytes32,(address,uint256,uint256,address,uint256,address,uint256,bytes)) - tranform_before_encode - 2" do
    hello = Hello.new

    data = hello.hex "2628abe10aaf809f0ea9a33fb15782582e8d8353ea15698d7067b057748581a4000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000001523057a05d6293c1e5171ee33ee0a00000000000000000000000000000000000000000000000000000000000000c30000000000000000000000000000000000000000000000000000000000066eee0000000000000000000000000000000000d2de3e2444926c4577b0a59f1dd8bc000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000d2de3e2444926c4577b0a59f1dd8bc00000000000000000000000000000000000000000000000000000000000739a4000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000a4394d1bca0000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b538870000000000000000000000000b001c95e86d64c1ad6e43944c568a6c31b5388700000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000009084128719162207770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    expect(hello.world).to eq data
  end
end
